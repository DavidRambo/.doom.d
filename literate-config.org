#+TITLE: Literate Config
#+PROPERTY: header-args :tangle config.el
#+STARTUP: overview

* Table of Contents :TOC:
- [[#preamble][Preamble]]
- [[#basic-settings][Basic Settings]]
  - [[#finer-grained-undo][Finer grained undo]]
  - [[#splitting-windows][Splitting Windows]]
- [[#fonts][Fonts]]
- [[#theme][Theme]]
- [[#modeline][Modeline]]
- [[#org-settings][Org Settings]]
  - [[#mixed-pitch-for-org][Mixed-Pitch for Org]]
  - [[#set-org-directories][Set org directories]]
  - [[#most-of-my-settings][Most of my settings]]
  - [[#turn-off-company][Turn off company]]
  - [[#styling-quote-blocks-and-done-headlines][Styling quote blocks and DONE headlines]]
  - [[#line-numbers][Line numbers]]
  - [[#disable-line-highlighting][Disable line highlighting]]
  - [[#todos][TODOs]]
  - [[#bullets][Bullets]]
  - [[#deft][Deft]]
  - [[#org-journal][Org Journal]]
  - [[#custom-commands-for-org-agenda][Custom Commands for Org Agenda]]
  - [[#org-super-agenda][Org Super Agenda]]
- [[#mappings][Mappings]]
  - [[#esc-as-quit-key-c-g][ESC as quit key (C-g)]]
  - [[#normal-mode-navigation][Normal Mode Navigation]]
  - [[#s-as-substitute]["S" as substitute]]
  - [[#buffer-movement][Buffer Movement]]
  - [[#window-movement][Window Movement]]
  - [[#writeroom][Writeroom]]
  - [[#open-tasksorg-file][Open tasks.org file]]
  - [[#open-hours-log][Open hours log]]
  - [[#open-todays-journal-entry][Open today's journal entry]]
  - [[#flyspell-toggle][Flyspell toggle]]

* Preamble

 $DOOMDIR/config.el -*- lexical-binding: t; -*-

 Place your private configuration here! Remember, you do not need to run 'doom
 sync' after modifying this file!

 Here are some additional functions/macros that could help you configure Doom:

 - `load!' for loading external *.el files relative to this one
 - `use-package!' for configuring packages
 - `after!' for running code after a package has loaded
 - `add-load-path!' for adding directories to the `load-path', relative to
   this file. Emacs searches the `load-path' when you load packages with
   `require' or `use-package'.
 - `map!' for binding new keys

 To get information about any of these functions/macros, move the cursor over
 the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
 This will open documentation for it, including demos of how they are used.

 You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
 they are implemented.

 Some functionality uses this to identify you, e.g. GPG configuration, email
 clients, file templates and snippets.

 #+begin_src  elisp
(setq user-full-name "David Rambo"
      user-mail-address "davrambo@gmail.com")
 #+end_src

* Basic Settings
** Finer grained undo

#+begin_src elisp
(setq  evil-want-fine-undo t
       undo-limit 80000000)
#+end_src

** Splitting Windows
From https://github.com/sunnyhasija/Academic-Doom-Emacs-Config
"The following code allows me to choose which buffer I want to see when I split a window. It first does a split to the right, and then opens Ivy and and shows me a preview."

#+begin_src elisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit evil-window-new)
  (+ivy/switch-buffer))
(setq +ivy-buffer-preview t)
#+end_src

* Fonts
 Doom exposes five (optional) variables for controlling fonts in Doom. Here
 are the three important ones:

 - `doom-font'
 - `doom-variable-pitch-font'
 - `doom-big-font' -- used for `doom-big-font-mode'; use this for
   presentations or streaming.

 They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
 font string. You generally only need these two:
 (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
       doom-variable-pitch-font (font-spec :family "sans" :size 13))

As explained by https://protesilaos.com/codelog/2020-09-05-emacs-note-mixed-font-heights/,
the default font's height is taken as the base.
So others can use a floating point ~:height~ value relative to it.

#+begin_src  elisp
(setq doom-font (font-spec :family "SauceCodePro Nerd Font" :height 140)
      doom-variable-pitch-font (font-spec :family "Source Sans Pro" :height 160))
#+end_src

* Theme
There are two ways to load a theme. Both assume the theme is installed and
 available. You can either set `doom-theme' or manually load a theme with the
 `load-theme' function. This is the default:
(setq doom-theme 'doom-one)

#+begin_src elisp
(setq doom-theme 'doom-gruvbox)
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t
        doom-gruvbox-light-variant "hard"))
#+end_src

I do not know why, but all other themes lack colors for org headings.
This snippet is intended to restore (?) colors to org headings in dark gruvbox.
However, it prevents my config from loading beyond it (my mappings stop working, fonts don't load properly.)

#+begin_src elisp
;(custom-theme-set-faces! 'doom-gruvbox
;  '(org-level-1 :foreground #076678)
;  '(org-level-2 :foreground #b57614)
;  '(org-level-3 :foreground #8f3f71)
;  '(org-level-4 :foreground #9d0006)
;  '(org-level-5 :foreground #79740e)
;  '(org-level-6 :foreground #427b58)
;  '(org-level-7 :foreground #458588)
;  '(org-level-8 :foreground #af3a03)
;  )
#+end_src

* Modeline
I use (modeline +light) in the init.el.

Make doom-modeline smaller.
#+begin_src elisp
(setq +modeline-height 22)
#+end_src

* Org Settings
** Mixed-Pitch for Org

#+begin_src elisp
(use-package! mixed-pitch
  :hook (org-mode . mixed-pitch-mode)
  :config
        (setq mixed-pitch-set-height t)
        (set-face-attribute 'variable-pitch nil :height 160)
        )
#+end_src

** Set org directories

#+begin_src elisp
(setq org-directory "~/notes/")
#+end_src

** Most of my settings
This section establishes:
 * source for org-agenda
 * fonts and other appearances

Including my entire org notes directory in the agenda was too slow (at least the first time I loaded it up).
So I went back to only "tasks.org" and I will add to it with "C-c [".
I may add my journal subdirectory in the future:
org-agenda-files '("~/notes/tasks.org" (files-expand-wildcards "~/notes/journal*.org"))

#+begin_src elisp
(after! org
 (add-hook 'org-mode-hook 'org-indent-mode)
 (setq
       ;org-agenda-files (file-expand-wildcards "~/notes/*.org")
       org-agenda-files '("~/notes/tasks.org")
       org-hide-emphasis-markers t
       )

 (require 'org-inlinetask) ; C-c C-x t

) ; end after! org
#+end_src

** Turn off company

#+begin_src elisp
(after! org
    (setq company-global-modes '(not org-mode)))
#+end_src

** Styling quote blocks and DONE headlines
Turn off quote block styling.
Change entire headline when set to "DONE" todo status
#+begin_src elisp
(after! org
    (setq org-fontify-quote-and-verse-blocks 'nil
          org-fontify-done-headline t))
#+end_src

** Line numbers
Update: Wow, it seems that going back to doom-font configuration and implementing the mixed-pitch package has fixed the uneven left-hand column.

 I had disabled display-line-numbers in favor of linum-mode because
 linum-mode works better with non-monospace fonts:
~;(global-linum-mode t)~
~;(setq linum-format "%2d ")~
 (The problem is that wrapped lines would move into the line number column.)
 However, that is being deprecated and apparently slows emacs way down when reaching a thousand lines.

#+begin_src elisp
(setq display-line-numbers-type t)

; Disable line numbers for certain modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

I customized the color of the current line number as follows:
 1. "M-x list-faces-display"
 2. find "line-number-current-line" and press RET
 3. set a new value and "Apply" or "Apply and Save"
    a. I set "background" to "none" in order to get rid of the hl-line-mode highlighting.

However, according to Eli Zaretskii, who wrote display-line-numbers, changing the face of the current line number disallows some of what makes this package more efficient than linum.

** Disable line highlighting

I can do it manually with the function `global-hl-line-mode` but it won't take when applying here.

#+begin_src elisp
;(add-hook 'org-mode-hook (lambda ()
;            (setq hl-line-mode nil)))
#+end_src

Above does not work either.
Neither will ~(setq global-hl-line-mode nil)~.

** TODOs
*** Keywords
#+begin_src elisp
(after! org
 (setq org-todo-keywords
       (quote ((sequence "TODO(t)" "NEXT(n)" "IN-PROGRESS(i)" "|" "DONE(d)")
               (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "MEETING")))
  )
)
#+end_src

*** Custom TODO Faces
For adjusting the entire heading with a "DONE" todo-tag, the official code would not work so I used the customize menu.
To get to it, do: "M-x org-customize" > Org Appearance > Org Faces > Org Headline Done
Org Fontify Done Headline was already set to true, but it can be found under "Org Appearance" if not.
#+begin_src elisp
(after! org
 (setq org-todo-keyword-faces
  '(("TODO" . (:foreground "#DC322F" :weight regular))
    ("NEXT" . (:foreground "#6C71C4" :weight bold))
    ("IN-PROGRESS" . (:foreground "#2AA198" :weight bold))
    ("DONE" . (:foreground "#427b58" :weight light))
   )
 )
)
#+end_src

** Bullets
  #+begin_src elisp
(use-package! org-superstar-mode
    :custom
    org-superstar-headline-bullets-list '("◉" "○" "⁖" "◌" "◿")
    org-superstar-first-inlinetask-bullet '("-")
 ;   org-superstar-item-bullet-alist '("•")
    :hook (org-mode . org-bullets-mode))
#+end_src

** Deft
#+begin_src elisp
(setq deft-directory "~/notes/"
      deft-extensions '("org")
      deft-recursive t)
#+end_src

** Org Journal

#+begin_src elisp
(use-package! org-journal
  :init
  (setq org-journal-dir "~/notes/journal/"
        org-journal-file-type 'daily
        org-journal-date-prefix "#+TITLE: "
        org-journal-time-prefix "* "
        org-journal-date-format "%B %d, %Y (%A) "
        org-journal-file-format "%Y-%m-%d.org")

  (setq org-journal-enable-agenda-integration nil)
)
#+end_src

** Custom Commands for Org Agenda
These show up when pressing "SPC o A":

#+begin_src elisp
(setq org-agenda-custom-commands
      '(("n" "Agenda and all TODOs"
         ((agenda "")
         (alltodo "")))
        ("h" "Home-related tasks" tags-todo "home"
           ((org-agenda-files '("~/notes/tasks.org"))) ; For when I expand agenda files and want this to be quick.
           )
        ("w" "Work-related tasks" tags-todo "postdoc|book")
        ("b" "Book-related tasks" tags-todo "book")
        ("r" "Reading tasks" tags-todo "reading"))
)
#+end_src

** Org Super Agenda
Basic configuration.

#+begin_src elisp
(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq
        org-log-done nil
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-agenda-block-separator 9472
        org-agenda-tags-column 100
        org-agenda-compact-blocks nil
        org-agenda-dim-blocked-tasks nil
        )
  :config
  (org-super-agenda-mode)
)
#+end_src

*** Groups for Org Super Agenda

 * TODO: Fix how TODOs are grouped. Currently, they list them under the parent heading. But I also have inexplicable inclusions/exclusions for different tags.

#+begin_src elisp
(setq org-super-agenda-groups
      '((:name "Today"
         :time-grid t
         :scheduled today
         :deadline today
         :face (:foreground "#DC322F")
         :order 1)
        (:name "In Progress"
         :todo ("IN-PROGRESS(p)")
         :face (:foreground "#2AA198")
         :order 2)
        (:name "Next"
         :todo ("NEXT(n)")
         :face (:foreground "#6C71C4")
         :order 3)
        (:name "To Do"
         :todo ("TODO(t)")
         :face (:foreground "#DC322F")
         :order 4)
        (:order-multi (5 (:name "Work"
                          :and (:tag "postdoc"))
                         (:name "Writing"
                          :and (:tag "book" :tag "writing"))
                         (:name "Reading"
                          :and (:tag "reading"))
                         (:name "Home"
                          :and (:tag "home"))
                      )
        )
;         (:name "Remaining Tasks"
;                :and (:todo "TODO"
;                      :not (:todo "postdoc" :todo "IN-PROGRESS" :todo "NEXT" :todo "reading" :todo "writing")))
         (:todo "WAITING" :order 8)
       )
)
#+end_src

* Mappings
** ESC as quit key (C-g)

#+begin_src elisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Normal Mode Navigation
In Vim on Linux, I could navigate in normal mode without skipping wrapped lines by mapping h/j/k/l to g+<h/j/k/l>.
This won't work here because "g" plus an evil-movement jumps to the next item or heading.
In evil-mode, the arrows move in this way in insert mode.

#+begin_src elisp
(define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
; Make horizontal movement cross lines
(setq-default evil-cross-lines t)
#+end_src

It's still a little wonky, presumably because of the variable-face font I'm using.
(Actually, it still skips around horizontally when moving vertically even with a monoface font.)
Scrolling up and down does not always remain in the correct column.

Update: after removing a bunch of my custom face settings and installing the mixed-pitch package, it seems to work fine.

** "S" as substitute
Disable evil-snipe so that "s" can be used as evil-substitute
I put the following in packages.el:
    `(package! evil-snipe :disable t)`
Set "s" as evil-substitute:

#+begin_src elisp
(define-key evil-motion-state-map "s" 'evil-substitute)
(define-key evil-motion-state-map "S" 'evil-change-whole-line)
#+end_src

Note that selecting two characters to which to jump can still be accomplished with avy ("g s s").
I prefer to use avy's timed-character function ("g s /").
** Buffer Movement
 Set Ctrl+PGUP/PGDN (my browser tab nav keys) to move between buffers.
 Rebind previous-buffer from <C-x C-Left> to C-PGUP (C-prior) and next-buffer to C-PGDN (or C-next)

 #+begin_src elisp
(global-set-key (kbd "C-<prior>") #'previous-buffer)
(global-set-key (kbd "C-<next>") #'next-buffer)
 #+end_src

** Window Movement

#+begin_src elisp
(map! :map evil-window-map
      "SPC" #'rotate-layout
      ;; Navigation
      "<left>"  #'evil-window-left
      "<down>"  #'evil-window-down
      "<up>"    #'evil-window-up
      "<right>" #'evil-window-right
      ;; Swapping windows
      "C-<left>"      #'+evil/window-move-left
      "C-<down>"      #'+evil/window-move-down
      "C-<up>"        #'+evil/window-move-up
      "C-<right>"     #'+evil/window-move-right)
#+end_src

** Writeroom
*** Config
#+begin_src elisp
(use-package writeroom-mode
  :config
  (setq writeroom-fullscreen-effect nil
        writeroom-mode-line t
        writeroom-width 80)
    )
#+end_src

*** Writeroom-Mode keybinding
#+begin_src elisp
(map! :leader
      :desc "Writeroom-mode"
      "W" #'writeroom-mode)
#+end_src

# Make writeroom default for org-mode files
#+begin_src elisp
;(use-package writeroom-mode
;  :ensure t
;  :init (add-hook 'org-mode-hook 'writeroom-mode)
;  :after org)
#+end_src

** Open tasks.org file
Function to open tasks.org and then map key to open.
#+begin_src elisp
(defun open-task-file ()
  "Open tasks.org file."
  (interactive)
  (find-file-existing "~/notes/tasks.org"))
(global-set-key (kbd "C-c t") 'open-task-file)
#+end_src

** Open hours log
Function to open hours-log.org and then map key to open.
#+begin_src elisp
(defun open-hours-log ()
  "Open hours-log.org file."
  (interactive)
  (find-file-existing "~/notes/hours-log.org"))
(global-set-key (kbd "C-c h") 'open-hours-log)
#+end_src

** Open today's journal entry
This needs an intermediary variable to name the current file because at present it reads the file format literally.
Just use "SPC n j j"
#+begin_src elisp
;(defun open-journal-entry ()
;  "Open today's journal entry."
;  (interactive)
;  (find-file-existing "~/notes/journal/%Y-%m-%d.org"))
;(global-set-key (kbd "C-c j") 'open-journal-entry)
#+end_src

** Flyspell toggle
#+begin_src elisp
(map! :leader
      :desc "Toggle flyspell"
      "t s" #'flyspell-mode)
#+end_src

