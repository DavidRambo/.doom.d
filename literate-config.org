#+TITLE: Literate Config
#+AUTHOR: David Rambo
#+PROPERTY: header-args :tangle config.el
#+STARTUP: content

* Table of Contents :TOC:
- [[#preamble][Preamble]]
  - [[#user-config][User Config]]
  - [[#both][Both]]
- [[#fonts][Fonts]]
- [[#theme][Theme]]
- [[#basic-settings][Basic Settings]]
  - [[#fringe][Fringe]]
  - [[#line-highlight][Line highlight]]
  - [[#finer-grained-undo][Finer grained undo]]
  - [[#splitting-windows][Splitting Windows]]
  - [[#set-windows-to-split-horizontally-by-default][Set windows to split horizontally by default]]
  - [[#toggle-window-slip-between-horizontal-and-vertical][Toggle window slip between horizontal and vertical]]
  - [[#terminal][Terminal]]
  - [[#pdfs][PDFs]]
  - [[#modeline][Modeline]]
  - [[#ivy][Ivy]]
  - [[#dired][Dired]]
  - [[#git-gutter][Git Gutter]]
  - [[#center-cursor-scrolling][Center cursor scrolling]]
  - [[#projectile][Projectile]]
  - [[#smooth-scrolling][Smooth Scrolling]]
- [[#org-settings][Org Settings]]
  - [[#mixed-pitch-for-org][Mixed-Pitch for Org]]
  - [[#set-org-directory][Set org directory]]
  - [[#after-org-settings][After org settings]]
  - [[#turn-off-company][Turn off company]]
  - [[#line-numbers][Line numbers]]
  - [[#disable-line-highlighting][Disable line highlighting]]
  - [[#styling-quote-blocks-and-done-headlines][Styling quote blocks and DONE headlines]]
  - [[#todos][TODOs]]
  - [[#bullets-superstar][Bullets (superstar)]]
  - [[#prettify-symbols][Prettify symbols]]
  - [[#deft][Deft]]
  - [[#org-journal][Org Journal]]
  - [[#org-agenda][Org Agenda]]
  - [[#org-super-agenda][Org Super Agenda]]
  - [[#presentations][Presentations]]
  - [[#org-roam][Org Roam]]
  - [[#writeroom][Writeroom]]
  - [[#pomodoro-timer][Pomodoro Timer]]
  - [[#org-export][Org Export]]
  - [[#latex-setup][LaTeX Setup]]
  - [[#todoist][todoist]]
- [[#python-ide][Python IDE]]
  - [[#turn-on-python-mode][Turn on python-mode]]
  - [[#line-numbers-in-python][line numbers in Python]]
  - [[#autopep8][Autopep8]]
- [[#mappings][Mappings]]
  - [[#narrowwiden-subtree][Narrow/Widen subtree]]
  - [[#esc-as-quit-key-c-g][ESC as quit key (C-g)]]
  - [[#normal-mode-navigation][Normal Mode Navigation]]
  - [[#s-as-substitute]["S" as substitute]]
  - [[#open-folds-in-evil-normal-state][Open fold(s) in evil-normal-state]]
  - [[#buffer-movement][Buffer Movement]]
  - [[#window-movement][Window Movement]]
  - [[#avy-for-colemak][Avy for colemak]]
  - [[#writeroomvisual-fill-column][Writeroom/visual-fill-column]]
  - [[#open-tasksorg-file][Open tasks.org file]]
  - [[#open-hours-log][Open hours log]]
  - [[#org-sidebar][Org-Sidebar]]

* Preamble

 $DOOMDIR/config.el -*- lexical-binding: t; -*-

 Place your private configuration here! Remember, you do not need to run 'doom
 sync' after modifying this file!

 Here are some additional functions/macros that could help you configure Doom:

 - `load!' for loading external *.el files relative to this one
 - `use-package!' for configuring packages
 - `after!' for running code after a package has loaded
 - `add-load-path!' for adding directories to the `load-path', relative to
   this file. Emacs searches the `load-path' when you load packages with
   `require' or `use-package'.
 - `map!' for binding new keys

 To get information about any of these functions/macros, move the cursor over
 the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
 This will open documentation for it, including demos of how they are used.

 You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
 they are implemented.

 Some functionality uses this to identify you, e.g. GPG configuration, email
 clients, file templates and snippets.
** User Config
 #+begin_src  elisp
(setq user-full-name "David Rambo"
      user-mail-address "davrambo@gmail.com")
 #+end_src

** Both
 I run this with both Linux and Mac OS, which have ~system-type~ variables set to ~'gnu/linux~ and ~'darwin~ respectively.
* Fonts
 Doom exposes five (optional) variables for controlling fonts in Doom. Here
 are the three important ones:

 - `doom-font'
 - `doom-variable-pitch-font'
 - `doom-big-font' -- used for `doom-big-font-mode'; use this for
   presentations or streaming.

 They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
 font string. You generally only need these two:
 (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
       doom-variable-pitch-font (font-spec :family "sans" :size 13))

As explained by https://protesilaos.com/codelog/2020-09-05-emacs-note-mixed-font-heights/,
the default font's height is taken as the base.
So others can use a floating point ~:height~ value relative to it.

#+begin_src  elisp
(cond ((eq system-type 'gnu/linux)
        (setq doom-font (font-spec :family "SauceCodePro Nerd Font" :size 14.0)
            doom-variable-pitch-font (font-spec :family "Source Sans Pro" :size 16.0 :weight 'regular)
            doom-serif-font (font-spec :family "DejaVu Serif" :size 16.0)
            doom-big-font (font-spec :size 28.0))
       )
      ((eq system-type 'darwin)
        (setq doom-font (font-spec :family "SauceCodePro Nerd Font Mono" :size 16.0)
            doom-variable-pitch-font (font-spec :family "Source Sans Pro" :size 18.0 :weight 'regular)
            doom-serif-font (font-spec :family "PT Serif" :size 16.0)
            doom-big-font (font-spec :size 28.0))
       ))
#+end_src

(set-face-attribute 'default nil :height 100)
* Theme
There are two ways to load a theme. Both assume the theme is installed and
 available. You can either set `doom-theme' or manually load a theme with the
 ~load-theme~ function. This is the default:
(setq doom-theme 'doom-one)

#+begin_src elisp
(cond ((eq system-type 'gnu/linux)
        (setq doom-theme 'doom-gruvbox)
            (after! doom-themes
            (setq doom-themes-enable-bold t
                    doom-themes-enable-italic t
                    doom-gruvbox-light-variant "hard"
                    doom-gruvbox-dark-variant "medium"))
       ))

(cond ((eq system-type 'darwin)
        (setq doom-theme 'doom-one)
       ))
#+end_src

* Basic Settings
** Fringe

#+begin_src elisp
(setq fring-mode 'default)
#+end_src

** Line highlight

#+begin_src elisp
(setq global-hl-line-mode 't)
#+end_src

** Finer grained undo

#+begin_src elisp
(setq  evil-want-fine-undo t
       undo-limit 80000000)
#+end_src

** Splitting Windows
From https://github.com/sunnyhasija/Academic-Doom-Emacs-Config
"The following code allows me to choose which buffer I want to see when I split a window. It first does a split to the right, and then opens Ivy and and shows me a preview."

#+begin_src elisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit evil-window-new)
  (+ivy/switch-buffer))
(setq +ivy-buffer-preview t)
#+end_src

** Set windows to split horizontally by default

#+begin_src elisp
(setq split-height-threshold nil)
(setq split-width-threshold 0)
#+end_src

** Toggle window slip between horizontal and vertical
I haven't implemented this because I prefer to do entirely horizontal split (in vim that's vertically split): i.e. side-by-side windows.
I have set that preference above.

#+begin_src elisp
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
         (next-win-buffer (window-buffer (next-window)))
         (this-win-edges (window-edges (selected-window)))
         (next-win-edges (window-edges (next-window)))
         (this-win-2nd (not (and (<= (car this-win-edges)
                     (car next-win-edges))
                     (<= (cadr this-win-edges)
                     (cadr next-win-edges)))))
         (splitter
          (if (= (car this-win-edges)
             (car (window-edges (next-window))))
          'split-window-horizontally
        'split-window-vertically)))
    (delete-other-windows)
    (let ((first-win (selected-window)))
      (funcall splitter)
      (if this-win-2nd (other-window 1))
      (set-window-buffer (selected-window) this-win-buffer)
      (set-window-buffer (next-window) next-win-buffer)
      (select-window first-win)
      (if this-win-2nd (other-window 1))))))

(global-set-key (kbd "C-x |") 'toggle-window-split)
#+end_src

** Terminal

#+begin_src elisp
(use-package vterm
  :commands vterm
  :config
  (setq term-prompt-regex "^[^#$%>\n]*[#$%>] *")
  ;(setq vterm-max-scrollback 10000)
)
#+end_src

#+begin_src elisp
(use-package eterm-256color
  :hook (vterm-mode . eterm-256color-mode))
#+end_src

** PDFs
From HLissner himself:

(use-package pdf-view
  :hook (pdf-tools-enabled . pdf-view-midnight-minor-mode)
  :hook (pdf-tools-enabled . hide-mode-line-mode)
  :config
  (setq pdf-view-midnight-colors '("#ABB2BF" . "#282C35")))
** Modeline
I use (modeline +light) in the init.el.

Make doom-modeline smaller.
#+begin_src elisp
(setq +modeline-height 22)
#+end_src

** Ivy

#+begin_src elisp
;; From hlissner's private config:
(after! ivy
  ;; I prefer search matching to be ordered; it's more precise
  (add-to-list 'ivy-re-builders-alist '(counsel-projectile-find-file . ivy--regex-plus)))
#+end_src

** Dired

#+begin_src elisp
(use-package dired
  :ensure nil
  :commands dired dired-jump
  :custom ((dired-listing-switches -agho --group-directories-first))
  :config
     (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))
#+end_src

** Git Gutter
Git gutter messes with visual-line-mode movement, so I disable it.

#+begin_src elisp
;(use-package git-gutter
;  :config
;  (setq git-gutter-mode nil))
#+end_src

The above and variations of it did not work, so I removed the package in ~init.el~.
** Center cursor scrolling
#+begin_src elisp
(use-package centered-cursor-mode
  :init
  (setq ccm-recenter-at-end-of-file t)
  )
#+end_src

(defun turn-centered-cursor-mode-on ()
  "Turn centered-cursor-mode on."
  (centered-cursor-mode +1)
)

(add-hook 'text-mode-hook 'turn-centered-cursor-mode-on)
(add-hook 'markdown-mode-hook 'turn-centered-cursor-mode-on)
(add-hook 'org-mode-hook 'turn-centered-cursor-mode-on)

#+begin_src elisp
(map! :desc "centered cursor mode"
      "C-c c" #'centered-cursor-mode)
#+end_src

** Projectile
I use git to track certain config files from my $HOME directory.
This messes with projectile (according to ~doom doctor~), so I tell projectile to ignore it.
#+begin_src elisp
(after! projectile
  (setq projectile-project-root-files-bottom-up
        (remove ".git" projectile-project-root-files-bottom-up)))
#+end_src

** Smooth Scrolling
It would be great if I could integrate this with evil-mode's bindings.
Perhaps I will need to wait for emacs 29's pixel-scroll-precision-mode (and also for doom emacs to support that version of emacs).
#+begin_src elisp
(use-package good-scroll
  :init
  (global-set-key [next] #'good-scroll-up-full-screen)
  (global-set-key [prior] #'good-scroll-down-full-screen)
  (setq good-scroll-mode t))
#+end_src

(use-package sublimity)

(use-package sublimity-scroll
  :init
  (setq sublimity-scroll-weight 10
        sublimity-scroll-drift-length 5))

(use-package sublimity-map)
* Org Settings
** Mixed-Pitch for Org

#+begin_src elisp
;(use-package! mixed-pitch
;  :hook (org-mode . mixed-pitch-mode)
;  :config
;        (setq mixed-pitch-set-height t)
;        (set-face-attribute 'variable-pitch nil :height 160)
;        )
#+end_src

Trying tecosaur's implementation with my sans serif variable pitch added (see the first chunks in the (after!) section):

#+begin_src elisp
(defvar mixed-pitch-modes '(org-mode LaTeX-mode markdown-mode)
  "Modes that `mixed-pitch-mode' should be enabled in, but only after UI initialisation.")
(defun init-mixed-pitch-h ()
  "Hook `mixed-pitch-mode' into each mode in `mixed-pitch-modes'.
Also immediately enables `mixed-pitch-modes' if currently in one of the modes."
  (when (memq major-mode mixed-pitch-modes)
    (mixed-pitch-mode 1))
  (dolist (hook mixed-pitch-modes)
    (add-hook (intern (concat (symbol-name hook) "-hook")) #'mixed-pitch-mode)))
(add-hook 'doom-init-ui-hook #'init-mixed-pitch-h)

(autoload #'mixed-pitch-serif-mode "mixed-pitch"
  "Change the default face of the current buffer to a serifed variable pitch, while keeping some faces fixed pitch." t)

(after! mixed-pitch

      (setq mixed-pitch-set-height t)
      (setq variable-pitch (font-spec :family "SauceCodePro Nerd Font"))
      (cond ((eq system-type 'gnu/linux)
            (set-face-attribute 'variable-pitch nil :height 160)
             )
            ((eq system-type 'darwin)
            (set-face-attribute 'variable-pitch nil :height 180)
             )
        )

  (defun mixed-pitch-sans-mode (&optional arg)
    "Change the default face of the current buffer to a sans-serif variable pitch."
    (interactive)
    (let ((mixed-pitch-face 'variable-pitch))
      (mixed-pitch-mode (or arg 'toggle))))

  (defface variable-pitch-serif
    '((t (:family "serif")))
    "A variable-pitch face with serifs."
    :group 'basic-faces)

  (setq mixed-pitch-set-height t)
  (cond ((eq system-type 'gnu/linux)
        (setq variable-pitch-serif-font (font-spec :family "Palatino Linotype" :size 18.0))
       )
      ((eq system-type 'darwin)
        (setq variable-pitch-serif-font (font-spec :family "Palatino" :size 18.0)))
  )
  (set-face-attribute 'variable-pitch-serif nil :font variable-pitch-serif-font)

  (defun mixed-pitch-serif-mode (&optional arg)
    "Change the default face of the current buffer to a serifed variable pitch, while keeping some faces fixed pitch."
    (interactive)
    (let ((mixed-pitch-face 'variable-pitch-serif))
      (mixed-pitch-mode (or arg 'toggle))))
)
#+end_src

** Set org directory

#+begin_src elisp
(setq org-directory "~/notes/")
#+end_src

** After org settings
This section establishes:
 * files for org-agenda
 * startup folded
 * custom faces

Including my entire org notes directory in the agenda was too slow (at least the first time I loaded it up).
So I went back to only "tasks.org" and I will add to it with "C-c [".
In the future, I may create a subdirectory ~tasks/*.org~ for ~org-agenda-files~.

The following as an eval at the end of my tasks.org file worked, but it caused a warning message:
(add-to-list 'org-agenda-files "~/notes/cs61a_syllabus.org" 'append)

#+begin_src elisp
(after! org
 (add-hook 'org-mode-hook 'org-indent-mode)
 (setq org-ellipsis " ▾ "
       ;org-agenda-files (file-expand-wildcards "~/notes/*.org")
       org-agenda-files '("~/notes/tasks.org")
       org-hide-emphasis-markers t
       org-startup-folded 'content
       ;line-spacing 0.3
       org-bullets-face-name doom-font
       display-line-numbers-type nil
       hl-line-mode nil
       org-indent-indentation-per-level 1
       )

 (custom-set-faces
  '(org-block ((t (:inherit doom-font) :size 14)))
  ;'(org-code ((t (:inherit shadow doom-font))))
 ; '(org-code ((t (:inherit doom-font))))
  '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
  '(org-document-title ((t (:inherit default :weight bold :height 1.1 :underline nil))))
;  '(org-document-info ((t (:foreground "dark orange"))))
  '(line-number-current-line ((t (:inherit (hl-line default) :strike-through nil :underline nil :slant normal :weight normal))))
  '(org-tag ((t (:inherit (shadow fixed-pitch) :weight regular :height 1.0))))
  '(org-property-value ((t (:inherit (fixed-pitch) :weight regular :height 1.0))))
  '(org-special-keyword ((t (:inherit (fixed-pitch) :weight regular :height 1.0))))
;  '(org-super-agenda-header ((t (:foreground "#076678"))))
  '(org-agenda-structure ((t (:foreground "#076678"))))
 )

 (require 'org-inlinetask) ; C-c C-x t
) ; end after! org
#+end_src

Removed from line-number-current-line ~:foreground "orange"~

I have used ~org-customize~ to change ~org-level-#~ to regular weight.
In the future for setting it here, the trick is to inherit ~org-outline~.

~'(org-level-1 ((t (:inherit outline-1 :extend t :weight normal))))~

** Turn off company

#+begin_src elisp
(after! org
    (setq company-global-modes '(not org-mode)))
#+end_src

** Line numbers
Update (2/26/2022): I set the line numbers type to nil in my "after org" settings block above.

It seems that going back to doom-font configuration and implementing the mixed-pitch package has fixed the uneven left-hand column.

 I had disabled display-line-numbers in favor of linum-mode because
 linum-mode works better with non-monospace fonts:
~;(global-linum-mode t)~
~;(setq linum-format "%2d ")~
 (The problem is that wrapped lines would move into the line number column.)
 However, that is being deprecated and apparently slows emacs way down when reaching a thousand lines.

#+begin_src elisp
;(after! org
;  (setq display-line-numbers '(not org-mode)))
;(setq display-line-numbers-type nil)

; Disable line numbers for certain modes
;(dolist (mode '(org-mode-hook
;                term-mode-hook
;                eshell-mode-hook))
;  (add-hook mode (lambda () (display-line-numbers-mode 'relative))))
#+end_src

I customized the color of the current line number as follows:
 1. "M-x list-faces-display"
 2. find "line-number-current-line" and press RET
 3. set a new value and "Apply" or "Apply and Save"
    a. I set "background" to "none" in order to get rid of the hl-line-mode highlighting.

However, according to Eli Zaretskii, who wrote display-line-numbers, changing the face of the current line number disallows some of what makes this package more efficient than linum.

** Disable line highlighting

I can do it manually with the function `global-hl-line-mode` but it won't take when applying here.

#+begin_src elisp
;(add-hook 'org-mode-hook (lambda ()
;            (setq hl-line-mode nil)))
#+end_src

Above does not work either.
Neither will ~(setq global-hl-line-mode nil)~.

** Styling quote blocks and DONE headlines
Turn off quote block styling.
Change entire headline when set to "DONE" todo status
#+begin_src elisp
(after! org
  (setq org-fontify-quote-and-verse-blocks 'nil
        org-fontify-done-headline t
        org-fontify-todo-headline t)
  )
#+end_src

** TODOs
*** Keywords and Priority
#+begin_src elisp
(after! org
 (setq org-todo-keywords
       (quote ((sequence "TODO(t)" "NEXT(n)" "IN-PROGRESS(i)" "|" "DONE(d)")
               (sequence " READ(r)" " READING(g)" "|" "DONE(d)")
               (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "MEETING")))
  )
 (setq org-lowest-priority ?C) ;; This is the default.
)
#+end_src

*** Custom TODO Faces
For adjusting the entire heading with a "DONE" todo-tag, the official code would not work so I used the customize menu.
To get to it, do: "M-x org-customize" > Org Appearance > Org Faces > Org Headline Done
Org Fontify Done Headline was already set to true, but it can be found under "Org Appearance" if not.

#+begin_src elisp
(after! org
 (setq org-todo-keyword-faces
  '(("TODO" . (:foreground "#FB4934" :weight regular))
    ("NEXT" . (:foreground "#458588" :slant italic))
    ("IN-PROGRESS" . (:foreground "#076678" :slant italic))
    ("DONE" . (:foreground "#8EC07C" :weight light :strike-through t))
    (" READ" . (:foreground "#b16286" :weight regular))
    (" READING" . (:foreground "#8f3f71" :weight regular))
    ("WAITING" . (:foreground "black" :weight light))
   )
 )
)
#+end_src

** Bullets (superstar)
I use  org-superstar to prettify bullets and TODOs.

  #+begin_src elisp
(use-package! org-superstar-mode
  :custom
    org-superstar-headline-bullets-list '("◉" "○" "◌" "⁖" "◿")
    org-superstar-first-inlinetask-bullet '("-")
    org-superstar-remove-leading-stars
  :hook (org-mode . org-bullets-mode))
#+end_src

#+begin_src elisp
(after! org-superstar
  (setq org-superstar-special-todo-items t
        org-superstar-todo-bullet-alist
                '(("TODO" . 9744)
                  ("[ ]" . 9744)
                  ("DONE" . 9745)
                  ("[X]" . 9745)
                 ; (" READ" .  )
                 ; (" READING" . 龎 )
                  (" READ" . 9744)
                  (" READING" . )
                  ("NEXT" . 9744)
                  ("IN-PROGRESS" . ))
        org-superstar-item-bullet-alist
                '((?* . ?•)
                  (?+ . ?○)
                  (?- . ?–))
    )
)
#+end_src

** Prettify symbols
For when my checkboxes are in lists and not (TODO) headlines, which means org-superstar won't change them.

#+begin_src elisp
(use-package! prettify-symbols-mode
  :custom
; ; (push '("[ ]" .  "☐") prettify-symbols-alist)
  prettify-symbols-alist '(("[ ]" . "☐")
                          ("[-]" . "❍")
                          ("[X]" . "☑"))
  :hook (org-mode . prettify-symbols-mode)
)
#+end_src

** Deft
#+begin_src elisp
(setq deft-directory "~/notes/"
      deft-extensions '("org")
      deft-recursive t)
#+end_src

** Org Journal

#+begin_src elisp
(use-package! org-journal
  :init
  (setq org-journal-dir "~/notes/journal/"
        org-journal-file-type 'daily
        org-journal-date-prefix "#+TITLE: "
        org-journal-time-prefix "* "
        org-journal-date-format "%B %d, %Y (%A) "
        org-journal-time-format "%I:%M %p\n"
        org-journal-file-format "%Y-%m-%d.org")

  (setq org-journal-enable-agenda-integration nil)
)
#+end_src

** Org Agenda
*** org-agenda icons

#+begin_src elisp
(defun fw/agenda-icon-octicon (name)
  "Returns an all-the-icons-octicon icon"
  (list (all-the-icons-octicon name)))

(defun fw/agenda-icon-faicon (name)
  "Returns an all-the-icons-faicon icon"
  (list (all-the-icons-faicon name)))

;; The strings listed first ("Postdoc", etc.) refer to the categories under headings in my tasks.org file.
;; https://old.reddit.com/r/emacs/comments/hnf3cw/my_orgmode_agenda_much_better_now_with_category/
(setq org-agenda-category-icon-alist
      `(("Postdoc" ,(fw/agenda-icon-octicon "pencil") nil nil :ascent center)
        ("Coding" ,(fw/agenda-icon-faicon "code") nil nil :ascent center)
        ("FRG" ,(fw/agenda-icon-octicon "book") nil nil :ascent center)
        ("Home" ,(fw/agenda-icon-octicon "home") nil nil :ascent center)
        ("Habits" ,(fw/agenda-icon-faicon "calendar-check-o") nil nil :ascent center)
        ))
#+end_src

*** Set ~org-agenda-files~ and custom commands that show up with "SPC o A":

#+begin_src elisp
(setq org-agenda-custom-commands
  '(
    ("n" "In-Progress and Next Tasks"
     (
        (todo "IN-PROGRESS|READING"
                ((org-agenda-overriding-header "\nIn-Progress Tasks\n-----------------")
                (org-agenda-prefix-format "   %i %?-2 t%s")
                (org-agenda-remove-tags t)))
        (todo "NEXT"
                ((org-agenda-overriding-header "\nNext Tasks\n----------")
                (org-agenda-prefix-format "   %i %?-2 t%s")
                (org-agenda-remove-tags t)))
        (agenda "" (
                (org-deadline-warning-days 8)
                (org-agenda-remove-tags t)
                (org-agenda-current-time-string "ᐊ┈┈┈┈┈┈┈ Now")
                (org-agenda-overriding-header "\nSchedule\n--------")))))

    ("h" "Home-related tasks"
       (tags-todo "home"
        ((org-agenda-overriding-header "Home Tasks")
        (org-agenda-remove-tags t)
        ))
     )

    ("w" "Work-related tasks"
     (
      (tags-todo "+postdoc-jobs"
        ((org-agenda-overriding-header "\nPostdoc Tasks")))
      (tags-todo "book"
        ((org-agenda-overriding-header "\nBook Tasks")))
      (tags-todo "jobs"
        ((org-agenda-overriding-header "\nJob Application Tasks")))
     ))

    ("b" "Book-related tasks"
     ( tags-todo "book"
        ((org-agenda-overriding-header "\nBook Tasks")
        (org-agenda-remove-tags t)
        )
     ))

    ("r" "Reading Tasks"
     ((todo " READING"
        ((org-agenda-overriding-header "\nCurrently Reading")
        (org-agenda-remove-tags t)
        ))
      (todo " READ"
        ((org-agenda-overriding-header "\nTo Read")
        (org-agenda-remove-tags t)
        ))
      ))
))
#+end_src

** Org Super Agenda
Basic configuration.

#+begin_src elisp
(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq
        org-log-done nil
        org-agenda-start-day nil
        org-agenda-span 7
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-agenda-block-separator 9472
        org-agenda-tags-column 100
        org-agenda-compact-blocks nil
        org-agenda-dim-blocked-tasks nil
        org-agenda-start-on-weekday nil
        org-super-agenda-groups nil
        )
  :config
  (org-super-agenda-mode)
)
#+end_src

*** Groups for Org Super Agenda
 * TODO: Fix how TODOs are grouped. Currently, they list them under the parent heading. But I also have inexplicable inclusions/exclusions for different tags.
   This may have to do with the reading sequence not picking up as TODOs (e.g. "reading" does not count as a todo-tag).

#+begin_src elisp
;(setq org-super-agenda-groups
;      '((:name "Today"
;         :time-grid t
;         :scheduled today
;         :deadline today
;         :face (:foreground "#DC322F")
;         :order 1)
;        (:name "In Progress"
;         :todo ("IN-PROGRESS(p)")
;         :face (:foreground "#2AA198")
;         :order 2)
;        (:name "Next"
;         :todo ("NEXT(n)")
;         :face (:foreground "#6C71C4")
;         :order 3)
;        (:name "To Do"
;         :todo ("TODO(t)")
;         :face (:foreground "#DC322F")
;         :order 4)
;        (:order-multi (5 (:name "Work"
;                          :and (:tag "postdoc" :tag "book"))
;                         (:name "Writing"
;                          :and (:tag "book" :tag "writing"))
;                         (:name "Reading"
;                          :and (:tag "reading"))
;                         (:name "Home"
;                          :and (:tag "home"))
;                      )
;        )
;;         (:name "Remaining Tasks"
;;                :and (:todo "TODO"
;;                      :not (:todo "postdoc" :todo "IN-PROGRESS" :todo "NEXT" :todo "reading" :todo "writing")))
;         (:todo "WAITING" :order 8)
;       )
;)
#+end_src

** Presentations
Presentation mode for org-mode.

#+begin_src elisp
(use-package hide-mode-line)

(defun efs/presentation-setup ()
  ;; Hide the mode line
  (hide-mode-line-mode 1)

  ;; Display images inline
  (org-display-inline-images) ;; Can also use org-startup-with-inline-images

  ;; Scale the text.  The next line is for basic scaling:
  (setq text-scale-mode-amount 2)
  (text-scale-mode 1))

  ;; This option is more advanced, allows you to scale other faces too
  ;; (setq-local face-remapping-alist '((default (:height 2.0) variable-pitch)
  ;;                                    (org-verbatim (:height 1.75) org-verbatim)
  ;;                                    (org-block (:height 1.25) org-block))))

(defun efs/presentation-end ()
  ;; Show the mode line again
  (hide-mode-line-mode 0)

  ;; Turn off text scale mode (or use the next line if you didn't use text-scale-mode)
  (text-scale-mode 0))

  ;; If you use face-remapping-alist, this clears the scaling:
 ; (setq-local face-remapping-alist '((default variable-pitch default))))

(use-package org-tree-slide
  :hook ((org-tree-slide-play . efs/presentation-setup)
                (org-tree-slide-stop . efs/presentation-end))
  :custom
  (org-tree-slide-slide-in-effect t)
  (org-tree-slide-activate-message "Presentation started!")
  (org-tree-slide-deactivate-message "Presentation finished!")
  (org-tree-slide-header t)
  (org-tree-slide-breadcrumbs " > ")
  (org-image-actual-width nil)
  (org-tree-slide-skip-outline-level 4))
#+end_src

** Org Roam

#+begin_src elisp
(use-package org-roam
  ;:ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/notes")
  (org-roam-capture-templates
   '(("d" "default" plain
      "#+filetags: %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)))

  (org-roam-node-display-template
          (concat "${title:*} "
                  (propertize "${tags:10}" 'face 'org-tag)))
  :config
  (org-roam-setup))
#+end_src

#+begin_src elisp
(map! :leader
      (:prefix-map ("r" . "Org-Roam commands")
       :desc "Toggle org-roam buffer"
       "t" #'org-roam-buffer-toggle
       :desc "Find or Create Node"
       "f" #'org-roam-node-find
       :desc "Insert Node"
       "i" #'org-roam-node-insert
       :desc "Create id for heading node"
       "c" #'org-id-get-create
       :desc "Add alias for node"
       "a" #'org-roam-alias-add
       )
      )
#+end_src

If I were to perform the keybind mappings with use-package, I think it would look like:

:bind (:prefix-map ("SPC r" . "Org-Roam ")
                ("t" . org-roam-buffer-toggle)
                etc.)

I don't know how to integrate descriptions.

** Writeroom
*** Config
(use-package writeroom-mode
  :config
  (setq writeroom-fullscreen-effect nil
        writeroom-mode-line t
        writeroom-width 80)
    )

*** Make writeroom default for org-mode files
(use-package writeroom-mode
  :ensure t
  :init (add-hook 'org-mode-hook 'writeroom-mode)
  :after org)

** Pomodoro Timer

#+begin_src elisp
(setq org-clock-sound "~/.doom.d/pomo_bell.wav")
#+end_src

** Org Export

#+begin_src elisp
(after! org
  (setq org-export-with-toc nil))
#+end_src

** LaTeX Setup

#+begin_src elisp
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
              '("org-plain-latex"
                "\\documentclass{article}
                [NO-DEFAULT-PACKAGES]
                [PACKAGES]
                [EXTRA]"
                        ("\\section{%s}" . "\\section*{%s}")
                        ("\\subsection{%s}" . "\\subsection*{%s}")
                        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                        ("\\paragraph{%s}" . "\\paragraph*{%s}")
                        ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

** todoist
#+begin_src elisp
(setq todoist-token "9267d354b1afa603871992b5974a692bb33c47ac")
#+end_src

* Python IDE
** Turn on python-mode

#+begin_src elisp
(use-package python
  ;:ensure t
  :custom
    (python-shell-interpreter "python3")
    )
#+end_src

** line numbers in Python
#+begin_src elisp
;(add-hook  'python-mode-hook
;           (lambda () (setq-local display-line-numbers-type t)))
;(add-hook 'python-mode-hook 'display-line-numbers-mode t)
#+end_src

** Autopep8
To automatically apply when saving a python file, use the
following code:
#+begin_src elisp
(require 'py-autopep8)
(add-hook 'python-mode-hook 'py-autopep8-mode)
#+end_src

To customize the behavior of "autopep8" you can set the
`py-autopep8-options':
#+begin_src elisp
(setq py-autopep8-options '("--max-line-length=90" "--aggressive"))
#+end_src

* Mappings
** Narrow/Widen subtree

#+begin_src elisp
(map! :leader
      :desc "Toggle narrow subtree"
      "t n" #'org-toggle-narrow-to-subtree)
#+end_src

** ESC as quit key (C-g)

#+begin_src elisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Normal Mode Navigation
In Vim on Linux, I could navigate in normal mode without skipping wrapped lines by mapping h/j/k/l to g+<h/j/k/l>.
This won't work here because "g" plus an evil-movement jumps to the next item or heading.
In evil-mode, the arrows move in this way in insert mode.

#+begin_src elisp
(define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
; Make horizontal movement cross lines
(setq-default evil-cross-lines t)
#+end_src

It's still a little wonky, presumably because of the variable-face font I'm using.
(Actually, it still skips around horizontally when moving vertically even with a monoface font.)
Scrolling up and down does not always remain in the correct column.
*Update*: I think it has to do with magit because when I stage changes, it goes away.

Update: after removing a bunch of my custom face settings and installing the mixed-pitch package, it seems to work fine.

** "S" as substitute
Disable evil-snipe so that "s" can be used as evil-substitute
I put the following in packages.el:
    `(package! evil-snipe :disable t)`
Set "s" as evil-substitute:

#+begin_src elisp
(define-key evil-motion-state-map "s" 'evil-substitute)
(define-key evil-motion-state-map "S" 'evil-change-whole-line)
#+end_src

Note that selecting two characters to which to jump can still be accomplished with avy ("g s s").
I prefer to use avy's timed-character function ("g s /").
** Open fold(s) in evil-normal-state
Suddenly ~z o~  and ~z O~ in normal mode stopped opening folds.

#+begin_src elisp
#+end_src

** Buffer Movement
 Set Ctrl+PGUP/PGDN (my browser tab nav keys) to move between buffers.
 Rebind previous-buffer from <C-x C-Left> to C-PGUP (C-prior) and next-buffer to C-PGDN (or C-next)

 #+begin_src elisp
(global-set-key (kbd "C-<prior>") #'previous-buffer)
(global-set-key (kbd "C-<next>") #'next-buffer)
 #+end_src

** Window Movement

#+begin_src elisp
(map! :map evil-window-map
      "SPC" #'rotate-layout
      ;; Navigation
      "<left>"  #'evil-window-left
      "<down>"  #'evil-window-down
      "<up>"    #'evil-window-up
      "<right>" #'evil-window-right
      ;; Swapping windows
      "C-<left>"      #'+evil/window-move-left
      "C-<down>"      #'+evil/window-move-down
      "C-<up>"        #'+evil/window-move-up
      "C-<right>"     #'+evil/window-move-right)
#+end_src

** Avy for colemak
From tecosaur's config, this sets the priority to colemak's homerow:

#+begin_src elisp
(after! avy
  ;; home row priorities: 8 6 4 5 - - 1 2 3 7
  (setq avy-keys '(?t ?e ?i ?s ?r ?o ?a ?n)))
#+end_src

** Writeroom/visual-fill-column
Currently trying to implement the same effect with just the ~visual-fill-column~ package, which is what Writeroom uses (same author).
My trouble with Writeroom is how it removes all other windows in the frame.
I often want to use Writeroom simply to set ~fill-column~ to ~80~ (but with variable-pitch it works out to about 100 actual characters) and to set ~visual-fill-column-center-text~ to ~t~ without closing other windows.
So when I use Writeroom, I need to then undo the window change use ~winner-undo~ (C-w C-u).
I also need to set the variable for centering text with this minor mode to true.

I've take a line from the package's github repo so that every file for which visual-line-mode is enabled (that's the hook), it will enable visual-fill-column-mode.

#+begin_src elisp
(setq fill-column 85)

(defun center-visual-fill ()
  (setq visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(add-hook 'visual-line-mode-hook #'center-visual-fill)

(map! :leader
      :desc "visual-fill-column-mode"
;      "W" #'writeroom-mode)
      "W" #'visual-fill-column-mode)
#+end_src

** Open tasks.org file
Function to open tasks.org and then map key to open.
#+begin_src elisp
(defun open-task-file ()
  "Open tasks.org file."
  (interactive)
  (find-file-existing "~/notes/tasks.org"))
(global-set-key (kbd "C-c t") 'open-task-file)
#+end_src

** Open hours log
Function to open hours-log.org and then map key to open.
#+begin_src elisp
(defun open-hours-log ()
  "Open hours-log.org file."
  (interactive)
  (find-file-existing "~/notes/hours-log.org"))
(global-set-key (kbd "C-c h") 'open-hours-log)
#+end_src

** Org-Sidebar
This no longer works.

#+begin_src elisp
;(map! :leader
;      :desc "Toggle org-sidebar-tree"
;      "t s" #'org-sidebar-tree-toggle)
#+end_src
