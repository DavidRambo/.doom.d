#+TITLE: Literate Config
#+PROPERTY: header-args :tangle config.el

* Table of Contents :TOC:
- [[#preamble][Preamble]]
- [[#fonts][Fonts]]
- [[#theme][Theme]]
- [[#org-settings][Org Settings]]
  - [[#turn-off-company][Turn off company]]
  - [[#line-numbers][Line numbers]]
  - [[#disable-line-highlighting][Disable line highlighting]]
  - [[#after-org-most-of-my-settings][After Org: most of my settings]]
  - [[#deft][Deft]]
  - [[#org-journal][Org Journal]]
  - [[#org-super-agenda][Org Super Agenda]]
  - [[#normal-mode-navigation][Normal Mode Navigation]]
- [[#mappings][Mappings]]
  - [[#buffer-movement][Buffer Movement]]
  - [[#s-as-substitute]["S" as substitute]]
  - [[#writeroom][Writeroom]]
  - [[#open-tasksorg-file][Open tasks.org file]]
  - [[#open-todays-journal-entry][Open today's journal entry]]

* Preamble

 $DOOMDIR/config.el -*- lexical-binding: t; -*-

 Place your private configuration here! Remember, you do not need to run 'doom
 sync' after modifying this file!

 Here are some additional functions/macros that could help you configure Doom:

 - `load!' for loading external *.el files relative to this one
 - `use-package!' for configuring packages
 - `after!' for running code after a package has loaded
 - `add-load-path!' for adding directories to the `load-path', relative to
   this file. Emacs searches the `load-path' when you load packages with
   `require' or `use-package'.
 - `map!' for binding new keys

 To get information about any of these functions/macros, move the cursor over
 the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
 This will open documentation for it, including demos of how they are used.

 You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
 they are implemented.

 Some functionality uses this to identify you, e.g. GPG configuration, email
 clients, file templates and snippets.

 #+begin_src  elisp
(setq user-full-name "David Rambo"
      user-mail-address "davrambo@gmail.com")
 #+end_src

* Fonts
 Doom exposes five (optional) variables for controlling fonts in Doom. Here
 are the three important ones:

 + `doom-font'
 + `doom-variable-pitch-font'
 + `doom-big-font' -- used for `doom-big-font-mode'; use this for
   presentations or streaming.

 They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
 font string. You generally only need these two:
 (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
       doom-variable-pitch-font (font-spec :family "sans" :size 13))

I found that to make it work the way I like, I have custom font faces set in an org-mode specific section below.

#+begin_src  elisp
(set-face-attribute 'default nil :font "Ubuntu Mono-14")
;(set-face-attribute 'fixed-pitch nil :font "Ubuntu Mono-14")
;(set-face-attribute 'variable-pitch nil :font "Source Sans Pro")
;
;(dolist (face '(default fixed-pitch))
;  (set-face-attribute `,face nil :font "Ubuntu Mono-14"))
;(dolist (face '(default variable-pitch))
;  (set-face-attribute `,face nil :font "ETBembo"))
#+end_src

* Theme
There are two ways to load a theme. Both assume the theme is installed and
 available. You can either set `doom-theme' or manually load a theme with the
 `load-theme' function. This is the default:
(setq doom-theme 'doom-one)

#+begin_src elisp
(setq doom-theme 'doom-gruvbox-light)
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t
        doom-gruvbox-light-variant "hard"))
#+end_src

* Org Settings
** Turn off company
#+begin_src elisp
(setq company-global-modes '(not org-mode))
#+end_src

** Line numbers
 I had disabled display-line-numbers in favor of linum-mode because
 linum-mode works better with non-monospace fonts.
 (The problem is that wrapped lines would move into the line number column.)
 However, that is being deprecated and apparently slows emacs way down when reaching a thousand lines.

#+begin_src elisp
(setq display-line-numbers-type t)

;(global-linum-mode t)
;(setq linum-format "%2d ")
#+end_src

I customized the color of the current line number as follows:
 - "M-x list-faces-display"
 - find "line-number-current-line" and press RET
 - set a new value and "Apply" or "Apply and Save"

However, according to Eli Zaretskii, who wrote display-line-numbers, changing the face of the current line number disallows some of what makes this package more efficient than linum.

** Disable line highlighting

I can do it manually with the function `global-hl-line-mode` but it won't take when applying here.

#+begin_src elisp
(add-hook 'org-mode-hook (lambda ()
            (setq hl-line-mode nil)))
#+end_src
Above does not work either.

** After Org: most of my settings
This section establishes:
 * my org-directory,
 * source for org-agenda,
 * fonts and other appearances like emphasis markers and bullets,
 * and TODOs.

Including my entire org notes directory in the agenda was too slow (at least the first time I loaded it up).
So I went back to only "tasks.org" and I will add to it with "C-c [".
I may add my journal subdirectory in the future:
org-agenda-files '("~/notes/tasks.org" (files-expand-wildcards "~/notes/journal*.org"))

#+begin_src elisp
(after! org
 (add-hook 'org-mode-hook 'org-indent-mode)
 (setq org-directory "~/notes/"
       ;org-agenda-files (file-expand-wildcards "~/notes/*.org")
       org-agenda-files '("~/notes/tasks.org")
       org-hide-emphasis-markers t)

;; TODOs
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "MEETING"))))

  (use-package! org-superstar-mode
    :custom
    org-superstar-headline-bullets-list '("◉" "○" "⁖" "◌" "◿")
    org-superstar-first-inlinetask-bullet '("▷")
 ;   org-superstar-item-bullet-alist '("•")
    :hook (org-mode . org-bullets-mode))

 (require 'org-inlinetask) ; C-c C-x t

 ;; Turn off quote block styling by toggling
 (setq org-fontify-quote-and-verse-blocks 'nil)

; (font-lock-add-keywords 'org-mode
;                          '(("^ *\\([-+*]\\) "
;                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◦"))))))

 (let* ((variable-tuple
          (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                ((x-list-fonts "Ubuntu") '(:font "Ubuntu"))
                ((x-family-fonts "Serif")    '(:family "Serif"))
                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (headline           `(:inherit default :weight bold)))

    (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline ,@variable-tuple))))
     `(org-level-7 ((t (,@headline ,@variable-tuple))))
     `(org-level-6 ((t (,@headline ,@variable-tuple))))
     `(org-level-5 ((t (,@headline ,@variable-tuple))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :size 14))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :size 14))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :size 16))))
     `(org-level-1 ((t (,@headline ,@variable-tuple :size 18))))
     `(org-document-title ((t (,@headline ,@variable-tuple :height 1.25 :underline nil))))))

 (custom-theme-set-faces
  'user
  ;'(variable-pitch ((t (:family "ETBembo" :height 160 :weight thin))))
  '(variable-pitch ((t (:family "Source Sans Pro" :size 14 :weight regular))))
  '(fixed-pitch ((t ( :family "Ubuntu Mono" )))))



 (add-hook 'org-mode-hook 'variable-pitch-mode)

 (custom-theme-set-faces
   'user
   '(org-default((t (:foreground "black"))))
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   ;'(org-link ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
) ; end after! org
#+end_src

** Deft
#+begin_src elisp
(setq deft-directory "~/notes/"
      deft-extensions '("org")
      deft-recursive t)
#+end_src

** Org Journal

#+begin_src elisp
(use-package! org-journal
  :init
  (setq org-journal-dir "~/notes/journal/"
        org-journal-file-type 'daily
        org-journal-date-prefix "#+TITLE: "
        org-journal-time-prefix "* "
        org-journal-date-format "%B %d, %Y (%A) "
        org-journal-file-format "%Y-%m-%d.org")

  (setq org-journal-enable-agenda-integration t)
)
#+end_src

** Org Super Agenda

Basic configuration.

#+begin_src elisp
(use-package! org-super-agenda
  :commands (org-super-agenda-mode)
  :after org-agenda
  :init
  (setq
        org-log-done 'time
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-agenda-block-separator nil
        org-agenda-tags-column 100
        org-agenda-compact-blocks t)
  :config
  (org-super-agenda-mode)
)
#+end_src

*** Display groups for Org Super Agenda

TBD

*** Custom Commands for Org Agenda

#+begin_src elisp
(setq org-agenda-custom-commands
      '(("n" "Agenda and all TODOs"
         ((agenda "")
         (alltodo "")))
      ("h" "Home-related tasks" tags-todo "home"
         ((org-agenda-files '("~/notes/tasks.org")))
         )
      ("w" "Work-related tasks" tags-todo "postdoc|book"))
)
#+end_src

** Normal Mode Navigation
In Vim on Linux, I could navigate in normal mode without skipping wrapped lines by mapping h/j/k/l to g+<h/j/k/l>.
This won't work here because "g" plus an evil-movement jumps to the next item or heading.
In evil-mode, the arrows move in this way in insert mode.

#+begin_src elisp
(define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
; Make horizontal movement cross lines
(setq-default evil-cross-lines t)
#+end_src

* Mappings

** Buffer Movement
 Set Ctrl+PGUP/PGDN (my browser tab nav keys) to move between buffers.
 Rebind previous-buffer from <C-x C-Left> to C-PGUP (C-prior) and next-buffer to C-PGDN (or C-next)

 #+begin_src elisp
(global-set-key (kbd "C-<prior>") #'previous-buffer)
(global-set-key (kbd "C-<next>") #'next-buffer)
 #+end_src

** "S" as substitute
Disable evil-snipe so that "s" can be used as evil-substitute
I put the following in packages.el:
    `(package! evil-snipe :disable t)`
Set "s" as evil-substitute:

#+begin_src elisp
(define-key evil-motion-state-map "s" 'evil-substitute)
(define-key evil-motion-state-map "S" 'evil-change-whole-line)
#+end_src

Note that selecting two characters to which to jump can still be accomplished with avy ("g s s").
I prefer to use avy's timed-character function ("g s /").

** Writeroom
Writeroom-Mode keybinding
#+begin_src elisp
(map! :leader
      :desc "Writeroom-mode"
      "W" #'writeroom-mode)
#+end_src

** Open tasks.org file
Set key to open tasks.org file.
#+begin_src elisp
(defun open-task-file ()
  "Open tasks.org file."
  (interactive)
  (find-file-existing "~/notes/tasks.org"))
(global-set-key (kbd "C-c t") 'open-task-file)
#+end_src

** Open today's journal entry
This needs an intermediary variable to name the current file because at present it reads the file format literally.
#+begin_src elisp
;(defun open-journal-entry ()
;  "Open today's journal entry."
;  (interactive)
;  (find-file-existing "~/notes/journal/%Y-%m-%d.org"))
;(global-set-key (kbd "C-c j") 'open-journal-entry)
#+end_src
